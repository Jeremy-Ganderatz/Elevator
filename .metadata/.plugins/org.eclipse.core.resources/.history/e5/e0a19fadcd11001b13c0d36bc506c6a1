package Service;

import java.util.Timer;
import java.util.TimerTask;

public abstract class MoveElevator implements Runnable {

	public static void goUp(String floorToReach, int yourFloor, int[]users) {
		Timer timer = new Timer();
		int begin = 1000;
		int timeInterval = 2000;
		timer.schedule(new TimerTask() {
			int counter = 0;
			int actualFloor = yourFloor;
			
			@Override
			public void run() {
				
				System.out.println("floor : " + actualFloor);
				actualFloor++;

				if (counter == Math.abs(yourFloor - Integer.parseInt(floorToReach))) {
					System.out
							.println("YOU ARRIVE AT FLOOR NUMBER : " + floorToReach + "  --- Bye Bye !!! ---");
					timer.cancel();
				}
				counter++;
			}
		}, begin, timeInterval);
	}
	

	public static void goDown(String floorToReach, int yourFloor, int[]users) {
		Timer timer = new Timer();
		int begin = 1000;
		int timeInterval = 2000;
		timer.schedule(new TimerTask() {
			int counter = 0;
			int actualFloor = yourFloor;

			@Override
			public void run() {
				System.out.println("floor : " + actualFloor);
				actualFloor--;

				if (counter == Math.abs(yourFloor - Integer.parseInt(floorToReach))) {
					System.out
							.println("YOU ARRIVE AT FLOOR NUMBER : " + floorToReach + "  --- Bye Bye !!! ---");
					timer.cancel();
				}
				counter++;
			}
		}, begin, timeInterval);
	}
	
	
	public static boolean checkingUsersOrders(int[]board, int actualFloor) {
		boolean res  = false;
		for (int i : board) {
			if (i == actualFloor) {
				res = true;
			}
			res = false;
		}
		return res;
	}
}
